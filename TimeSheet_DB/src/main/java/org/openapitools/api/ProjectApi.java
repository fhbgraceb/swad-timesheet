/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Project;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-01T06:23:12.537901Z[Etc/UTC]")
@Validated
@Tag(name = "project", description = "Acces list of workings hours by a particular project")
@RequestMapping("${openapi.timesheetOpenAPI30.base-path:}")
public interface ProjectApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /project/{project-hoursId} : Delete project by ID
     * For valid response try integer IDs with value less then 10.
     *
     * @param projectHoursId ID of the project-hours that needs to be deleted (required)
     * @return Invalid ID supplied (status code 400)
     *         or project not found (status code 404)
     */
    @Operation(
        operationId = "deleteproject",
        summary = "Delete project by ID",
        tags = { "project-hours" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "project not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/project/{project-hoursId}"
    )
    default ResponseEntity<Void> deleteproject(
        @Parameter(name = "project-hoursId", description = "ID of the project-hours that needs to be deleted", required = true) @PathVariable("project-hoursId") Long projectHoursId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /project/{project-hoursId} : Find Project by ID
     * For valid response try integer IDs with value less then 5 or higher 10.
     *
     * @param projectHoursId ID of project that needs to be fetched (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or project-hours not found (status code 404)
     */
    @Operation(
        operationId = "getprojectHoursById",
        summary = "Find Project by ID",
        tags = { "project-hours" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Project.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Project.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "project-hours not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/project/{project-hoursId}",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<Project> getprojectHoursById(
        @Parameter(name = "project-hoursId", description = "ID of project that needs to be fetched", required = true) @PathVariable("project-hoursId") Long projectHoursId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"pid\" : 10 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<project> <pid>10</pid> <name>aeiou</name> </project>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
