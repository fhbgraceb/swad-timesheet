openapi: 3.0.3
info:
  title: Timesheet - OpenAPI 3.0
  description: This is a simple timeshoot tool... (coming soon)
  termsOfService: http://swagger.io/terms/
  contact:
    email: fhb190776@fh-vie.ac.at
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
tags:
  - name: timesheet
    description: See a list of all working hours
    externalDocs:
      description: Description coming soon
      url: http://swagger.io
  - name: project-hours
    description: Acces list of workings hours by a particular project
    externalDocs:
      description: Description coming soon
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /timesheet:
    put:
      tags:
        - timesheet
      summary: Update an existing timeslot
      description: Update an existing time by Id
      operationId: updateTime
      requestBody:
        description: Update an existent time
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timesheet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Timesheet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Timesheet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timesheet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Timesheet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Timeslot not found
        '405':
          description: Validation exception
    post:
      tags:
        - timesheet
      summary: Add a new timeslot
      description: Add a new timeslot to all working hours
      operationId: addTimeslot
      requestBody:
        description: Create a new timeslot in all working hours timesheet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timesheet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Timesheet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Timesheet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timesheet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Timesheet'
        '405':
          description: Invalid input
    delete:
      tags:
        - timesheet
      summary: Deletes a timeslot
      description: delete a timeslot
      operationId: deleteTimeslot
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
      responses:
        '400':
          description: Invalid timesheet value
  /timesheet/findTimeslot:
    get:
      tags:
        - timesheet
      summary: Finds Timeslot by date
      description: description coming soon ...
      operationId: findTimeslotbydate
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timesheet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Timesheet'
        '405':
          description: Invalid input
      security:
        - timesheet_auth:
            - write:Timesheet
            - read:Timesheet
  /project-hours:
    get:
      tags:
        - project-hours
      summary: Returns hours of a project
      description: Returns hours of a project
      operationId: getProject-hours
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
    post:
      tags:
        - project-hours
      summary: Place an timeslot for a project
      description: Place a new timeslot in the project-hours list
      operationId: placeProject-hours
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project-hours'
          application/xml:
            schema:
              $ref: '#/components/schemas/Project-hours'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project-hours'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project-hours'
        '405':
          description: Invalid input
  /project/{project-hoursId}:
    get:
      tags:
        - project-hours
      summary: Find Project by ID
      description: For valid response try integer IDs with value <= 5 or > 10.
      operationId: getproject-hoursById
      parameters:
        - name: project-hoursId
          in: path
          description: ID of project that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
            application/xml:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid ID supplied
        '404':
          description: project-hours not found
    delete:
      tags:
        - project-hours
      summary: Delete project by ID
      description: For valid response try integer IDs with value < 10.
      operationId: deleteproject
      parameters:
        - name: project-hoursId
          in: path
          description: ID of the project-hours that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: project not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Project:
      type: object
      properties:
        pid:
          type: integer
          format: int64
          example: 10
        name:
          type: string
      xml:
        name: project
    Timesheet:
      type: object
      properties:
        tid:
          type: integer
          format: int64
          example: 1
        weekday:
          type: string
          format: date
          example: Monday
        Start:
          type: string
          format: date-time
        End:
          type: string
          format: date-time
        working-hours:
          type: number
          format: double
      xml:
        name: timesheet
    Project-hours:
      type: object
      properties:
        pid:
          type: integer
          format: int64
          example: 1
        tid:
          type: integer
          format: int64
          example: 1
        working-hours:
          type: number
          format: double
      xml:
        name: timesheet
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
      xml:
        name: user
  requestBodies:
    Timeslot:
      description: Timeslot
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Timesheet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Timesheet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    timesheet_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://timesheet3.swagger.io/oauth/authorize
          scopes:
            write:Timesheet: modify Timesheet in your account
            read:Timesheet: read your Timesheet
